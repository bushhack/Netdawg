import argparse
import shlex
import socket
import subprocess
import sys
import textwrap
import threading


def execute(cmd):
  
  cmd = cmd.strip()

  if not cmd:
    return
    
  output = subprocess.check_output(shlex.split(cmd),stderr=subprocess.STDOUT)
  return output.decode()


class Netdawg:

  def __init__(self,args,buffer=None):

    self.args = args
    self.buffer = buffer
    self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

  
  def run(self):
    
    if self.args.listen:
      self.listen()
    else:
      self.send()

  
  def send(self):
    
    self.socket.connect((self.args.target, self.args.port))
  
    if self.buffer:
      self.socket.send(self.buffer)

    try:
      while True:
        recv_len = 1
        response = ''
        
        while recv_len:
          data = self.socket.recv(4096)
          recv_len = len(data)
          response += data.decode()
          
          if recv_len < 4096:
            break

          if response:
            print(response)
            buffer = input('>')
            buffer += '\n'
            self.socket.send(buffer.encode())
            
    except KeyboardInterrupt:
      print('Connection terminated.')
      self.socket.close()
      sys.exit()


  def listen(self):

    self.socket.bind((self.args.target, self.args.port))
    self.socket.listen(5)
    
    while True:
      client_socket, _ = self.socket.accept()
      client_thread = threading.Thread(target=self.manager, args=(client_socket,))
      client_thread.start()


  def manager(self, client_socket):
   
    if self.args.command:
      cmd_buffer = b''
      while True:
        try:
          client_socket.send(b'>')
          while '\n' not in cmd_buffer.decode():
            cmd_buffer += client_socket.recv(64)
          response = execute(cmd_buffer.decode())
          if response:
            client_socket.send(response.encode())
          cmd_buffer = b''
        except Exception as e:
          print(f'Connection Terminated.')
          self.socket.close()
          sys.exit()

if __name__ == '__main__':

  parser = argparse.ArgumentParser(description='Netdawg Manual', formatter_class=argparse.RawDescriptionHelpFormatter, epilog=textwrap.dedent('''Example: netcat.py -t 192.16.1.234 -p 1337 -l -c''')) 
  parser.add_argument('-t', '--target', default='192.168.1.234', help='specified IP')
  parser.add_argument('-p', '--port', type=int, default=1337, help='specified port')
  parser.add_argument('-l', '--listen', action='store_true', help='listen')
  parser.add_argument('-c', '--command', action='store_true', help='command shell')
  args = parser.parse_args()

  if args.listen:
    buffer = ''
  else:
    buffer = sys.stdin.read()
  
  nc = Netdawg(args, buffer.encode())
  nc.run()

"""
Resources:
https://docs.python.org/3/library/argparse.html
https://docs.python.org/3/library/socket.html
https://docs.python.org/3/library/shlex.html
https://docs.python.org/3/library/subprocess.html
https://docs.python.org/3/library/sys.html
https://docs.python.org/3/library/textwrap.html
https://docs.python.org/3/library/threading.html
https://www.digitalocean.com/community/tutorials/python-string-encode-decode
https://docs.python.org/3/tutorial/classes.html
https://www.geeksforgeeks.org/__init__-in-python/
https://www.geeksforgeeks.org/socket-in-computer-network/
https://manpages.debian.org/bullseye/manpages-dev/setsockopt.2.en.html


"""
